apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: redis-pvc
  namespace: alertagent
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard  # 根据集群配置调整
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: alertagent
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
data:
  redis.conf: |
    # Redis 配置文件
    bind 0.0.0.0
    port 6379
    
    # 持久化配置
    save 900 1
    save 300 10
    save 60 10000
    
    # AOF 配置
    appendonly yes
    appendfsync everysec
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # 内存配置
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # 网络配置
    tcp-keepalive 300
    timeout 0
    
    # 日志配置
    loglevel notice
    logfile ""
    
    # 安全配置
    protected-mode yes
    
    # 性能配置
    tcp-backlog 511
    databases 16
    
    # 慢查询日志
    slowlog-log-slower-than 10000
    slowlog-max-len 128
    
    # 客户端配置
    maxclients 10000
    
    # 禁用危险命令
    rename-command FLUSHDB ""
    rename-command FLUSHALL ""
    rename-command KEYS ""
    rename-command CONFIG ""
    rename-command SHUTDOWN REDIS_SHUTDOWN
    rename-command DEBUG ""
    rename-command EVAL ""
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: alertagent
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/part-of: alertagent-system
spec:
  replicas: 1
  strategy:
    type: Recreate  # Redis 使用 Recreate 策略确保数据一致性
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
      annotations:
        prometheus.io/scrape: "false"
    spec:
      securityContext:
        fsGroup: 999  # redis 用户组 ID
      containers:
      - name: redis
        image: redis:7-alpine
        imagePullPolicy: IfNotPresent
        command:
        - redis-server
        - /etc/redis/redis.conf
        - --requirepass
        - $(REDIS_PASSWORD)
        ports:
        - containerPort: 6379
          name: redis
          protocol: TCP
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        volumeMounts:
        - name: redis-storage
          mountPath: /data
        - name: redis-config
          mountPath: /etc/redis
          readOnly: true
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --no-auth-warning
            - -a
            - $(REDIS_PASSWORD)
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        securityContext:
          runAsUser: 999
          runAsGroup: 999
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
      volumes:
      - name: redis-storage
        persistentVolumeClaim:
          claimName: redis-pvc
      - name: redis-config
        configMap:
          name: redis-config
          defaultMode: 0644
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
  namespace: alertagent
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - port: 6379
    targetPort: 6379
    protocol: TCP
    name: redis
  selector:
    app.kubernetes.io/name: redis
---
# Redis Exporter for Prometheus monitoring
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-exporter
  namespace: alertagent
  labels:
    app.kubernetes.io/name: redis-exporter
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis-exporter
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis-exporter
        app.kubernetes.io/component: monitoring
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9121"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: redis-exporter
        image: oliver006/redis_exporter:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 9121
          name: metrics
          protocol: TCP
        env:
        - name: REDIS_ADDR
          value: "redis://redis-service:6379"
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: redis-secret
              key: redis-password
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /metrics
            port: 9121
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          runAsNonRoot: true
          runAsUser: 65534
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
---
apiVersion: v1
kind: Service
metadata:
  name: redis-exporter
  namespace: alertagent
  labels:
    app.kubernetes.io/name: redis-exporter
    app.kubernetes.io/component: monitoring
spec:
  type: ClusterIP
  ports:
  - port: 9121
    targetPort: 9121
    protocol: TCP
    name: metrics
  selector:
    app.kubernetes.io/name: redis-exporter