apiVersion: v1
kind: Secret
metadata:
  name: alertagent-secrets
  namespace: alertagent
  labels:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: config
type: Opaque
data:
  # 数据库密码 (base64 编码)
  db-password: cGFzc3dvcmQ=  # password
  
  # Redis 密码 (base64 编码)
  redis-password: cmVkaXNwYXNzd29yZA==  # redispassword
  
  # JWT 密钥 (base64 编码)
  jwt-secret: eW91cl9qd3Rfc2VjcmV0X2hlcmU=  # your_jwt_secret_here
  
  # 加密密钥 (base64 编码)
  encryption-key: eW91cl8zMl9jaGFyX2VuY3J5cHRpb25fa2V5X2hlcmU=  # your_32_char_encryption_key_here
  
  # SMTP 配置 (base64 编码)
  smtp-password: eW91cl9zbXRwX3Bhc3N3b3JkX2hlcmU=  # your_smtp_password_here
  
  # 钉钉配置 (base64 编码)
  dingtalk-secret: eW91cl9kaW5ndGFsa19zZWNyZXQ=  # your_dingtalk_secret
  
  # Dify API Key (base64 编码)
  dify-api-key: eW91cl9kaWZ5X2FwaV9rZXlfaGVyZQ==  # your_dify_api_key_here
  
  # AWS 凭证 (base64 编码)
  aws-access-key-id: eW91cl9hd3NfYWNjZXNzX2tleQ==  # your_aws_access_key
  aws-secret-access-key: eW91cl9hd3Nfc2VjcmV0X2tleQ==  # your_aws_secret_key
---
apiVersion: v1
kind: Secret
metadata:
  name: alertagent-tls
  namespace: alertagent
  labels:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: tls
type: kubernetes.io/tls
data:
  # TLS 证书和私钥 (base64 编码)
  # 使用以下命令生成:
  # kubectl create secret tls alertagent-tls --cert=path/to/tls.crt --key=path/to/tls.key -n alertagent --dry-run=client -o yaml
  tls.crt: |
    # 在此处放置 base64 编码的 TLS 证书
    # 或者使用 cert-manager 自动生成
  tls.key: |
    # 在此处放置 base64 编码的 TLS 私钥
    # 或者使用 cert-manager 自动生成
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secret
  namespace: alertagent
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
type: Opaque
data:
  # PostgreSQL 配置 (base64 编码)
  postgres-db: YWxlcnRfYWdlbnQ=  # alert_agent
  postgres-user: cG9zdGdyZXM=  # postgres
  postgres-password: cGFzc3dvcmQ=  # password
---
apiVersion: v1
kind: Secret
metadata:
  name: redis-secret
  namespace: alertagent
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
type: Opaque
data:
  # Redis 配置 (base64 编码)
  redis-password: cmVkaXNwYXNzd29yZA==  # redispassword
---
# 注意: 在生产环境中，请使用以下方法管理密钥:
# 1. 使用 Kubernetes Secrets 管理工具如 External Secrets Operator
# 2. 使用云提供商的密钥管理服务 (AWS Secrets Manager, Azure Key Vault, GCP Secret Manager)
# 3. 使用 Vault 等专业密钥管理工具
# 4. 确保所有密钥都经过适当的 base64 编码
# 5. 定期轮换密钥
# 6. 限制对 Secret 资源的访问权限