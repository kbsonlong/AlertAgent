apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: alertagent
  labels:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: mysql
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard  # 根据集群调整

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertagent-mysql
  namespace: alertagent
  labels:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: mysql
    app.kubernetes.io/version: "8.0"
spec:
  replicas: 1
  strategy:
    type: Recreate  # MySQL不支持多副本
  selector:
    matchLabels:
      app.kubernetes.io/name: alertagent
      app.kubernetes.io/component: mysql
  template:
    metadata:
      labels:
        app.kubernetes.io/name: alertagent
        app.kubernetes.io/component: mysql
        app.kubernetes.io/version: "8.0"
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        ports:
        - containerPort: 3306
          name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alertagent-secrets
              key: mysql-root-password
        - name: MYSQL_DATABASE
          value: "alert_agent"
        - name: MYSQL_USER
          value: "alertagent"
        - name: MYSQL_PASSWORD
          valueFrom:
            secretKeyRef:
              name: alertagent-secrets
              key: mysql-password
        volumeMounts:
        - name: mysql-storage
          mountPath: /var/lib/mysql
        - name: mysql-config
          mountPath: /etc/mysql/conf.d
        - name: mysql-init
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - mysqladmin
            - ping
            - -h
            - localhost
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 1
          failureThreshold: 3
      volumes:
      - name: mysql-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-config
        configMap:
          name: mysql-config
          optional: true
      - name: mysql-init
        configMap:
          name: mysql-init
          optional: true

---
apiVersion: v1
kind: Service
metadata:
  name: alertagent-mysql
  namespace: alertagent
  labels:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: mysql
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
    protocol: TCP
    name: mysql
  selector:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: mysql

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
  namespace: alertagent
  labels:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: mysql
data:
  custom.cnf: |
    [mysqld]
    # 性能优化
    innodb_buffer_pool_size = 1G
    innodb_log_file_size = 256M
    innodb_flush_log_at_trx_commit = 2
    innodb_flush_method = O_DIRECT
    
    # 连接设置
    max_connections = 200
    max_connect_errors = 1000
    
    # 字符集设置
    character-set-server = utf8mb4
    collation-server = utf8mb4_unicode_ci
    
    # 时区设置
    default-time-zone = '+08:00'
    
    # 日志设置
    slow_query_log = 1
    slow_query_log_file = /var/lib/mysql/slow.log
    long_query_time = 2
    
    # 安全设置
    skip-name-resolve
    
    [mysql]
    default-character-set = utf8mb4
    
    [client]
    default-character-set = utf8mb4

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init
  namespace: alertagent
  labels:
    app.kubernetes.io/name: alertagent
    app.kubernetes.io/component: mysql
data:
  init.sql: |
    -- AlertAgent 数据库初始化脚本
    USE alert_agent;
    
    -- 创建基础表结构
    CREATE TABLE IF NOT EXISTS alerts (
        id INT AUTO_INCREMENT PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        status VARCHAR(50) DEFAULT 'active',
        severity VARCHAR(20) DEFAULT 'medium',
        message TEXT,
        labels JSON,
        annotations JSON,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_status (status),
        INDEX idx_severity (severity),
        INDEX idx_created_at (created_at)
    );
    
    -- 创建用户表
    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(100) NOT NULL UNIQUE,
        email VARCHAR(255) NOT NULL UNIQUE,
        password_hash VARCHAR(255) NOT NULL,
        role VARCHAR(50) DEFAULT 'user',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_username (username),
        INDEX idx_email (email)
    );
    
    -- 插入默认管理员用户 (密码: admin123)
    INSERT IGNORE INTO users (username, email, password_hash, role) VALUES 
    ('admin', 'admin@alertagent.local', '$2a$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin');
    
    -- 创建告警规则表
    CREATE TABLE IF NOT EXISTS alert_rules (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(255) NOT NULL,
        expression TEXT NOT NULL,
        duration VARCHAR(50) NOT NULL,
        severity VARCHAR(20) NOT NULL,
        labels JSON,
        annotations JSON,
        targets JSON,
        version VARCHAR(50) NOT NULL DEFAULT 'v1.0.0',
        status ENUM('pending', 'active', 'inactive', 'error') DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_name (name),
        INDEX idx_status (status),
        INDEX idx_created_at (created_at)
    );
    
    -- 创建配置同步状态表
    CREATE TABLE IF NOT EXISTS config_sync_status (
        id VARCHAR(36) PRIMARY KEY,
        cluster_id VARCHAR(100) NOT NULL,
        config_type VARCHAR(50) NOT NULL,
        config_hash VARCHAR(64),
        sync_status ENUM('success', 'failed', 'pending') DEFAULT 'pending',
        sync_time TIMESTAMP,
        error_message TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        UNIQUE KEY uk_cluster_type (cluster_id, config_type),
        INDEX idx_sync_status (sync_status),
        INDEX idx_sync_time (sync_time)
    );
    
    -- 创建任务队列表
    CREATE TABLE IF NOT EXISTS task_queue (
        id VARCHAR(36) PRIMARY KEY,
        queue_name VARCHAR(100) NOT NULL,
        task_type VARCHAR(50) NOT NULL,
        payload JSON NOT NULL,
        priority INT DEFAULT 0,
        retry_count INT DEFAULT 0,
        max_retry INT DEFAULT 3,
        status ENUM('pending', 'processing', 'completed', 'failed') DEFAULT 'pending',
        scheduled_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        started_at TIMESTAMP NULL,
        completed_at TIMESTAMP NULL,
        error_message TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_queue_status (queue_name, status),
        INDEX idx_scheduled_at (scheduled_at),
        INDEX idx_priority (priority)
    );
    
    -- 创建通知插件配置表
    CREATE TABLE IF NOT EXISTS notification_plugins (
        id VARCHAR(36) PRIMARY KEY,
        name VARCHAR(100) NOT NULL UNIQUE,
        display_name VARCHAR(255) NOT NULL,
        version VARCHAR(50) NOT NULL,
        config_schema JSON NOT NULL,
        enabled BOOLEAN DEFAULT TRUE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
        INDEX idx_name (name),
        INDEX idx_enabled (enabled)
    );
    
    COMMIT;