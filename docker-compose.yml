version: '3.8'

services:
  # PostgreSQL 数据库
  postgres:
    image: postgres:15-alpine
    container_name: alertagent-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-alert_agent}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - alertagent-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres} -d ${DB_NAME:-alert_agent}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Redis 缓存
  redis:
    image: redis:7-alpine
    container_name: alertagent-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - alertagent-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      timeout: 3s
      retries: 5
      start_period: 10s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # 数据库迁移服务
  migrate:
    build:
      context: .
      dockerfile: Dockerfile.migrate
    container_name: alertagent-migrate
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-alert_agent}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    networks:
      - alertagent-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - migration
    restart: "no"

  # AlertAgent API 服务
  alertagent-api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: alertagent-api
    restart: unless-stopped
    environment:
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      HTTP_PORT: 8080
      METRICS_PORT: 9090
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-alert_agent}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      CONFIG_PATH: /app/config/config.yaml
    ports:
      - "${API_PORT:-8080}:8080"
      - "${API_METRICS_PORT:-9090}:9090"
    volumes:
      - ./config:/app/config:ro
      - api_logs:/app/logs
    networks:
      - alertagent-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    profiles:
      - api
      - full
    deploy:
      replicas: ${API_REPLICAS:-2}
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # AlertAgent Worker 服务
  alertagent-worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
    container_name: alertagent-worker
    restart: unless-stopped
    environment:
      APP_ENV: ${APP_ENV:-production}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      LOG_FORMAT: ${LOG_FORMAT:-json}
      WORKER_MODE: "true"
      METRICS_PORT: 9091
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-alert_agent}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      QUEUE_WORKERS: ${QUEUE_WORKERS:-4}
      CONFIG_PATH: /app/config/config.yaml
    ports:
      - "${WORKER_METRICS_PORT:-9091}:9091"
    volumes:
      - ./config:/app/config:ro
      - worker_logs:/app/logs
    networks:
      - alertagent-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    profiles:
      - worker
      - full
    deploy:
      replicas: ${WORKER_REPLICAS:-1}
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s

  # Rule Server 服务
  rule-server:
    build:
      context: .
      dockerfile: Dockerfile.rule-server
    container_name: alertagent-rule-server
    restart: unless-stopped
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-alert_agent}
      PORT: 8080
      GIN_MODE: ${GIN_MODE:-release}
      LOG_LEVEL: ${LOG_LEVEL:-info}
    ports:
      - "${RULE_SERVER_PORT:-8081}:8080"
    volumes:
      - rule_logs:/app/logs
    networks:
      - alertagent-network
    depends_on:
      postgres:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    profiles:
      - rule-server
      - full
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Prometheus 监控
  prometheus:
    image: prom/prometheus:latest
    container_name: alertagent-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./deployments/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - alertagent-network
    profiles:
      - monitoring
      - full
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # Grafana 可视化
  grafana:
    image: grafana/grafana:latest
    container_name: alertagent-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployments/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./deployments/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - alertagent-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
      - full
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  api_logs:
    driver: local
  worker_logs:
    driver: local
  rule_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  alertagent-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16