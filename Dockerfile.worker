# 多阶段构建 - 构建阶段
FROM golang:1.21-alpine AS builder

# 设置工作目录
WORKDIR /app

# 安装必要的包
RUN apk add --no-cache git ca-certificates tzdata make

# 复制 go mod 文件
COPY go.mod go.sum ./

# 下载依赖
RUN go mod download

# 复制源代码
COPY . .

# 构建Worker服务 (假设有worker入口)
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -o alertagent-worker ./cmd/worker/main.go 2>/dev/null || \
    CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -a -installsuffix cgo \
    -ldflags='-w -s -extldflags "-static"' \
    -o alertagent-worker ./cmd/main.go

# 运行阶段
FROM alpine:latest

# 安装必要的包
RUN apk --no-cache add ca-certificates tzdata curl

# 设置时区
RUN ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    echo 'Asia/Shanghai' > /etc/timezone

# 创建非 root 用户
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# 创建必要的目录
RUN mkdir -p /app/config /app/logs /app/data && \
    chown -R appuser:appgroup /app

# 设置工作目录
WORKDIR /app

# 从构建阶段复制二进制文件
COPY --from=builder /app/alertagent-worker .

# 复制配置文件模板
COPY --chown=appuser:appgroup config/config.yaml.example ./config/
COPY --chown=appuser:appgroup config/features.yaml ./config/

# 切换到非 root 用户
USER appuser

# 设置默认环境变量
ENV APP_ENV=production \
    LOG_LEVEL=info \
    LOG_FORMAT=json \
    WORKER_MODE=true \
    METRICS_PORT=9091 \
    DB_HOST=localhost \
    DB_PORT=5432 \
    DB_NAME=alert_agent \
    DB_USER=postgres \
    DB_PASSWORD="" \
    REDIS_HOST=localhost \
    REDIS_PORT=6379 \
    REDIS_PASSWORD="" \
    QUEUE_WORKERS=4 \
    CONFIG_PATH=/app/config/config.yaml

# 暴露端口
EXPOSE 9091

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD curl -f http://localhost:9091/health || exit 1

# 运行应用
CMD ["./alertagent-worker"]