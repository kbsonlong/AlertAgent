# AlertAgent ÂºÄÂèëÁéØÂ¢ÉÁÆ°ÁêÜ Makefile
# ‰ΩúËÄÖ: AlertAgent Team
# ÁâàÊú¨: 1.0.0

.PHONY: help dev dev-stop dev-restart docker-dev docker-dev-stop docker-dev-restart clean build test lint deps check install

# ÈªòËÆ§ÁõÆÊ†á
help: ## ÊòæÁ§∫Â∏ÆÂä©‰ø°ÊÅØ
	@echo "AlertAgent ÂºÄÂèëÁéØÂ¢ÉÁÆ°ÁêÜÂëΩ‰ª§"
	@echo "============================"
	@echo ""
	@echo "Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É:"
	@echo "  dev              ÂêØÂä®Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É (MySQL + Redis + Go + React)"
	@echo "  dev-stop         ÂÅúÊ≠¢Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É"
	@echo "  dev-restart      ÈáçÂêØÊú¨Âú∞ÂºÄÂèëÁéØÂ¢É"
	@echo ""
	@echo "Docker ÂºÄÂèëÁéØÂ¢É:"
	@echo "  docker-dev       ÂêØÂä® Docker ÂºÄÂèëÁéØÂ¢É"
	@echo "  docker-dev-stop  ÂÅúÊ≠¢ Docker ÂºÄÂèëÁéØÂ¢É"
	@echo "  docker-dev-restart ÈáçÂêØ Docker ÂºÄÂèëÁéØÂ¢É"
	@echo "  docker-clean     ÂÅúÊ≠¢Âπ∂Ê∏ÖÁêÜÊâÄÊúâ Docker ËµÑÊ∫ê"
	@echo ""
	@echo "È°πÁõÆÁÆ°ÁêÜ:"
	@echo "  deps             ÂÆâË£ÖÈ°πÁõÆ‰æùËµñ"
	@echo "  build            ÊûÑÂª∫È°πÁõÆ"
	@echo "  test             ËøêË°åÊµãËØï"
	@echo "  lint             ‰ª£Á†ÅÊ£ÄÊü•"
	@echo "  clean            Ê∏ÖÁêÜÊûÑÂª∫Êñá‰ª∂"
	@echo "  check            Ê£ÄÊü•ÂºÄÂèëÁéØÂ¢É"
	@echo "  install          ÂÆâË£ÖÂºÄÂèëÂ∑•ÂÖ∑"
	@echo ""
	@echo "‰ΩøÁî®Á§∫‰æã:"
	@echo "  make dev         # ÂêØÂä®Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É"
	@echo "  make docker-dev  # ÂêØÂä® Docker ÂºÄÂèëÁéØÂ¢É"
	@echo "  make test        # ËøêË°åÊµãËØï"

# Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É
dev: ## ÂêØÂä®Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É
	@echo "üöÄ ÂêØÂä®Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É..."
	@chmod +x scripts/dev-setup.sh
	@./scripts/dev-setup.sh

dev-stop: ## ÂÅúÊ≠¢Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É
	@echo "üõë ÂÅúÊ≠¢Êú¨Âú∞ÂºÄÂèëÁéØÂ¢É..."
	@chmod +x scripts/dev-stop.sh
	@./scripts/dev-stop.sh

dev-restart: ## ÈáçÂêØÊú¨Âú∞ÂºÄÂèëÁéØÂ¢É
	@echo "üîÑ ÈáçÂêØÊú¨Âú∞ÂºÄÂèëÁéØÂ¢É..."
	@chmod +x scripts/dev-restart.sh
	@./scripts/dev-restart.sh

# Docker ÂºÄÂèëÁéØÂ¢É
docker-dev: ## ÂêØÂä® Docker ÂºÄÂèëÁéØÂ¢É
	@echo "üê≥ ÂêØÂä® Docker ÂºÄÂèëÁéØÂ¢É..."
	@chmod +x scripts/docker-dev-setup.sh
	@./scripts/docker-dev-setup.sh

docker-dev-stop: ## ÂÅúÊ≠¢ Docker ÂºÄÂèëÁéØÂ¢É
	@echo "üê≥ ÂÅúÊ≠¢ Docker ÂºÄÂèëÁéØÂ¢É..."
	@chmod +x scripts/docker-dev-stop.sh
	@./scripts/docker-dev-stop.sh

docker-dev-restart: ## ÈáçÂêØ Docker ÂºÄÂèëÁéØÂ¢É
	@echo "üê≥ ÈáçÂêØ Docker ÂºÄÂèëÁéØÂ¢É..."
	@make docker-dev-stop
	@sleep 2
	@make docker-dev

docker-clean: ## ÂÅúÊ≠¢Âπ∂Ê∏ÖÁêÜÊâÄÊúâ Docker ËµÑÊ∫ê
	@echo "üßπ Ê∏ÖÁêÜ Docker ËµÑÊ∫ê..."
	@chmod +x scripts/docker-dev-stop.sh
	@./scripts/docker-dev-stop.sh --cleanup

# È°πÁõÆÁÆ°ÁêÜ
deps: ## ÂÆâË£ÖÈ°πÁõÆ‰æùËµñ
	@echo "üì¶ ÂÆâË£ÖÈ°πÁõÆ‰æùËµñ..."
	@echo "ÂÆâË£Ö Go ‰æùËµñ..."
	@go mod download
	@go mod tidy
	@echo "ÂÆâË£ÖÂâçÁ´Ø‰æùËµñ..."
	@cd web && npm install
	@echo "‚úÖ ‰æùËµñÂÆâË£ÖÂÆåÊàê"

build: ## ÊûÑÂª∫È°πÁõÆ
	@echo "üî® ÊûÑÂª∫È°πÁõÆ..."
	@echo "ÊûÑÂª∫ÂêéÁ´Ø..."
	@go build -o bin/alertagent cmd/main.go
	@echo "ÊûÑÂª∫ÂâçÁ´Ø..."
	@cd web && npm run build
	@echo "‚úÖ ÊûÑÂª∫ÂÆåÊàê"

test: ## ËøêË°åÊµãËØï
	@echo "üß™ ËøêË°åÊµãËØï..."
	@echo "ËøêË°åÂêéÁ´ØÊµãËØï..."
	@go test -v ./...
	@echo "ËøêË°åÂâçÁ´ØÊµãËØï..."
	@cd web && npm test
	@echo "‚úÖ ÊµãËØïÂÆåÊàê"

lint: ## ‰ª£Á†ÅÊ£ÄÊü•
	@echo "üîç ‰ª£Á†ÅÊ£ÄÊü•..."
	@echo "Ê£ÄÊü• Go ‰ª£Á†Å..."
	@if command -v golangci-lint >/dev/null 2>&1; then \
		golangci-lint run; \
	else \
		echo "‚ö†Ô∏è  golangci-lint Êú™ÂÆâË£ÖÔºåË∑≥Ëøá Go ‰ª£Á†ÅÊ£ÄÊü•"; \
	fi
	@echo "Ê£ÄÊü•ÂâçÁ´Ø‰ª£Á†Å..."
	@cd web && npm run lint
	@echo "‚úÖ ‰ª£Á†ÅÊ£ÄÊü•ÂÆåÊàê"

clean: ## Ê∏ÖÁêÜÊûÑÂª∫Êñá‰ª∂
	@echo "üßπ Ê∏ÖÁêÜÊûÑÂª∫Êñá‰ª∂..."
	@rm -rf bin/
	@rm -rf web/dist/
	@rm -rf logs/
	@rm -f .backend.pid .frontend.pid
	@echo "‚úÖ Ê∏ÖÁêÜÂÆåÊàê"

check: ## Ê£ÄÊü•ÂºÄÂèëÁéØÂ¢É
	@echo "üîç ËøêË°åËØ¶ÁªÜÁéØÂ¢ÉÊ£ÄÊü•..."
	@chmod +x scripts/check-env.sh
	@./scripts/check-env.sh

check-simple: ## ÁÆÄÂçïÁéØÂ¢ÉÊ£ÄÊü•
	@echo "üîç Ê£ÄÊü•ÂºÄÂèëÁéØÂ¢É..."
	@echo "Ê£ÄÊü• Go ÁâàÊú¨:"
	@go version || echo "‚ùå Go Êú™ÂÆâË£Ö"
	@echo "Ê£ÄÊü• Node.js ÁâàÊú¨:"
	@node --version || echo "‚ùå Node.js Êú™ÂÆâË£Ö"
	@echo "Ê£ÄÊü• npm ÁâàÊú¨:"
	@npm --version || echo "‚ùå npm Êú™ÂÆâË£Ö"
	@echo "Ê£ÄÊü• MySQL:"
	@mysql --version || echo "‚ùå MySQL Êú™ÂÆâË£Ö"
	@echo "Ê£ÄÊü• Redis:"
	@redis-server --version || echo "‚ùå Redis Êú™ÂÆâË£Ö"
	@echo "Ê£ÄÊü• Docker:"
	@docker --version || echo "‚ùå Docker Êú™ÂÆâË£Ö"
	@echo "Ê£ÄÊü• Docker Compose:"
	@docker-compose --version || docker compose version || echo "‚ùå Docker Compose Êú™ÂÆâË£Ö"
	@echo "‚úÖ ÁéØÂ¢ÉÊ£ÄÊü•ÂÆåÊàê"

install: ## ÂÆâË£ÖÂºÄÂèëÂ∑•ÂÖ∑
	@echo "üõ†Ô∏è  ÂÆâË£ÖÂºÄÂèëÂ∑•ÂÖ∑..."
	@echo "ÂÆâË£Ö golangci-lint..."
	@if ! command -v golangci-lint >/dev/null 2>&1; then \
		curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $$(go env GOPATH)/bin v1.54.2; \
	else \
		echo "golangci-lint Â∑≤ÂÆâË£Ö"; \
	fi
	@echo "ÂÆâË£Ö air (ÁÉ≠ÈáçËΩΩÂ∑•ÂÖ∑)..."
	@if ! command -v air >/dev/null 2>&1; then \
		go install github.com/cosmtrek/air@latest; \
	else \
		echo "air Â∑≤ÂÆâË£Ö"; \
	fi
	@echo "‚úÖ ÂºÄÂèëÂ∑•ÂÖ∑ÂÆâË£ÖÂÆåÊàê"

# Âø´Êç∑ÂëΩ‰ª§Âà´Âêç
start: dev ## ÂêØÂä®ÂºÄÂèëÁéØÂ¢É (dev ÁöÑÂà´Âêç)
stop: dev-stop ## ÂÅúÊ≠¢ÂºÄÂèëÁéØÂ¢É (dev-stop ÁöÑÂà´Âêç)
restart: dev-restart ## ÈáçÂêØÂºÄÂèëÁéØÂ¢É (dev-restart ÁöÑÂà´Âêç)

# ÊòæÁ§∫ÂΩìÂâçÁä∂ÊÄÅ
status: ## ÊòæÁ§∫ÊúçÂä°Áä∂ÊÄÅ
	@echo "üìä ÊúçÂä°Áä∂ÊÄÅÊ£ÄÊü•"
	@echo "================"
	@echo "Ê£ÄÊü•Á´ØÂè£Âç†Áî®ÊÉÖÂÜµ:"
	@echo "ÂêéÁ´Ø (8080):"
	@lsof -i :8080 || echo "  Á´ØÂè£ 8080 Êú™Ë¢´Âç†Áî®"
	@echo "ÂâçÁ´Ø (5173):"
	@lsof -i :5173 || echo "  Á´ØÂè£ 5173 Êú™Ë¢´Âç†Áî®"
	@echo "MySQL (3306):"
	@lsof -i :3306 || echo "  Á´ØÂè£ 3306 Êú™Ë¢´Âç†Áî®"
	@echo "Redis (6379):"
	@lsof -i :6379 || echo "  Á´ØÂè£ 6379 Êú™Ë¢´Âç†Áî®"
	@echo "Ollama (11434):"
	@lsof -i :11434 || echo "  Á´ØÂè£ 11434 Êú™Ë¢´Âç†Áî®"
	@echo ""
	@echo "Ê£ÄÊü• Docker ÂÆπÂô®:"
	@if command -v docker >/dev/null 2>&1; then \
		docker ps --filter "name=alertagent" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" || echo "  Ê≤°ÊúâËøêË°åÁöÑ AlertAgent ÂÆπÂô®"; \
	else \
		echo "  Docker Êú™ÂÆâË£Ö"; \
	fi

# ÊºîÁ§∫ÂíåÊµãËØï
demo: ## ËøêË°åÂäüËÉΩÊºîÁ§∫
	@echo "üéØ ËøêË°åÂäüËÉΩÊºîÁ§∫..."
	@chmod +x scripts/demo.sh
	@./scripts/demo.sh

demo-api: ## ÊºîÁ§∫ API ÂäüËÉΩ
	@echo "üéØ ÊºîÁ§∫ API ÂäüËÉΩ..."
	@chmod +x scripts/demo.sh
	@./scripts/demo.sh --api

demo-frontend: ## ÊºîÁ§∫ÂâçÁ´ØÂäüËÉΩ
	@echo "üéØ ÊºîÁ§∫ÂâçÁ´ØÂäüËÉΩ..."
	@chmod +x scripts/demo.sh
	@./scripts/demo.sh --frontend

# Êó•ÂøóÊü•Áúã
logs: ## Êü•ÁúãÂ∫îÁî®Êó•Âøó
	@echo "üìã Êü•ÁúãÂ∫îÁî®Êó•Âøó"
	@if [ -f "logs/alert_agent.log" ]; then \
		tail -f logs/alert_agent.log; \
	else \
		echo "Êó•ÂøóÊñá‰ª∂‰∏çÂ≠òÂú®: logs/alert_agent.log"; \
	fi

docker-logs: ## Êü•Áúã Docker ÊúçÂä°Êó•Âøó
	@echo "üìã Êü•Áúã Docker ÊúçÂä°Êó•Âøó"
	@if [ -f "docker-compose.dev.yml" ]; then \
		if docker compose version >/dev/null 2>&1; then \
			docker compose -f docker-compose.dev.yml logs -f; \
		else \
			docker-compose -f docker-compose.dev.yml logs -f; \
		fi; \
	else \
		echo "docker-compose.dev.yml Êñá‰ª∂‰∏çÂ≠òÂú®"; \
	fi